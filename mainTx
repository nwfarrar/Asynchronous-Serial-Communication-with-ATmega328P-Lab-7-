/*
 * Lab 7.cpp
 *
 * Created: 4/2/2020 5:38:51 PM
 * Author : Nathan Farrar
 */ 

//Tx (sender of data)

//** GLOBAL VARIABLES **/
long freqclk = 16000000; // clock frequency in Hz
char sensorvalue = 0; // value read from analog sensor (0-1023)


//** FUNCTION DECLARATIONS **//
void wait(volatile int N);  // Note that variables in the delay loops are declared as volatile.  If not, the compiler will likely
// see these as not necessary since they are not used for any important tasks or I/O and will eliminate the loops.  In fact, if
// the simulator is used without these being declared volatile, then the loops will be ignored all together in the simulation,
// and the cycle counter will not grow correctly.
void delay_1_msec_raw_count();

void initialize_usart(); // function to set up USART
void transmit_data_usart(unsigned char data);


#include <avr/io.h>

//============================================================
// MAIN
//============================================================

int main(void)
{
	DDRD = 0b11111111; //DPorts are set as outputs.
	DDRB = 0b00111111; //Ports B0 through B5 are set as outputs.
	DDRC = 0b00000000; //Port C0 through C6 is set as an input.

	PRR = 0x00;  // clear Power Reduction ADC bit (0) in PRR register
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;  // 0x87 // 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
	ADMUX = 0b01100000; // bit 6-7 AVCC with external capacitor at AREF pin
						//bit 5 left justification
						

	initialize_usart(); // Initialize the USART with desired parameters
	
//============================================================
// PROGRAM LOOP
//============================================================
  
    while (1) 
    {
		
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensorvalue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
		
		transmit_data_usart(sensorvalue); // Transmit desired character repeatedly Ã± which is // the letter B in this case
	}
	return 0;
}



//=========================================
// S U B R O U T I N E S
//=========================================

void wait(volatile int N) {
	//*** wait ***
		
	/* This subroutine creates a delay of N msec by calling another function.
			Inputs: N = number of msec for the delay (N is int, so can be up to 65,536 msec)
			Outputs: None
			
		Why is N a volatile variable? Some C compilers try to optimize the code and may eliminate code that appears to do nothing.  A time-killing 
		loop is is one of those code blocks that could be removed during compile.  Using a nonvolatile variable in the function tells the compiler not 
		remove it.
	*/
	while (N>1) {  // This loop creates an N msec delay
		N=N-1;
		delay_1_msec_raw_count();
	}
} // end wait()

void delay_1_msec_raw_count() {
    //*** delay N ms **
    /* This subroutine creates a delay of N msec by using a raw time-killing count.
			Inputs: None
			Outputs: None
	*/
	volatile int count = (freqclk/1000-28)/4; // each cycle takes 4 clock cycles, so count is the number of cycles needed to create a 1 msec delay.
									// 28 is the approximate number of other clock cycles used in the subroutine
	while (count > 1) {  // This loop is expected to create a 1 msec delay, but it is in fact much longer.  Because of the size of the variables,
			// there is a lot more that needs to be done each cycle so the loop takes much longer than 1 msec to execute. To know exact time for each 
			// instruction, use assembly language instead of C. (Or look at the disassembly code file and count instructions.)
			count--; // decrement count
	}
	
		
} // end delay_1_msec_raw_count()

void initialize_usart(void) // function to set up USART
{
	UCSR0B = (1<<TXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) ; // Asynchronous mode, 8-bit data; no parity; 1 stop bit 
	UBRR0L = 0x33; // 9,600 baud if Fosc = 16MHz
	// using chip's internal clock at 8MHZ so baud rate is 19200, UBRR0L = 0x33
}

void transmit_data_usart(unsigned char data) // Function to transmit a character
{ //replace data with sensorvalue????
	while (!(UCSR0A & (1<<UDRE0))); // Poll to make sure transmit buffer is ready, // then send data
	UDR0 = data;
}
